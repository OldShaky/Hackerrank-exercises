import Control.Applicative
import Control.Monad
import System.IO


main :: IO ()
main = do
    n_temp <- getLine
    let n = read n_temp :: Int
    a_temp <- getMultipleLines n
    let a = map ( map ( read :: String -> Int ) . words ) a_temp
        arev = reverse a
        result = abs ( (sum $ leftdiag a) - (sum $ leftdiag arev) )
    putStrLn (show result :: String)
    return ()


getMultipleLines :: Int -> IO [String]
getMultipleLines n
    | n <= 0 = return []
    | otherwise = do          
        x <- getLine         
        xs <- getMultipleLines (n-1)    
        let ret = (x:xs)    
        return ret          

leftdiag :: [[Int]] -> [Int]
leftdiag []     = []
leftdiag (x:xs) = head x : leftdiag (map tail xs)
