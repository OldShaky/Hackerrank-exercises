import Control.Applicative
import Control.Monad
import System.IO


main :: IO ()
main = do
    n_temp <- getLine
    let n = read n_temp :: Int
    password <- getLine
    let counted = countChars password (0,0,0,0)
        result = addChars counted n
    print result
    return ()


countChars :: [Char] -> (Int,Int,Int,Int) -> (Int,Int,Int,Int)
countChars [] t = t
countChars (x:xs) (a,b,c,d)
    | x `elem` ['0'..'9'] = countChars xs (a+1,b,c,d)
    | x `elem` ['a'..'z'] = countChars xs (a,b+1,c,d)
    | x `elem` ['A'..'Z'] = countChars xs (a,b,c+1,d)
    | x `elem` "!@#$%^&*()-+" = countChars xs (a,b,c,d+1)
    | otherwise = countChars xs (a,b,c,d)

addChars :: (Int,Int,Int,Int) -> Int -> Int
addChars (a,b,c,d) n
    | a == 0 = 1 + addChars (a+1,b,c,d) (n+1)
    | b == 0 = 1 + addChars (a,b+1,c,d) (n+1)
    | c == 0 = 1 + addChars (a,b,c+1,d) (n+1)
    | d == 0 = 1 + addChars (a,b,c,d+1) (n+1)
    | a /= 0 && b /= 0 && c /= 0 && d /= 0  && n<6 = 6-n
    | a /= 0 && b /= 0 && c /= 0 && d /= 0  && n>=6 = 0
