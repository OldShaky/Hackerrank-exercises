import Control.Applicative
import Control.Monad
import System.IO


main :: IO ()
main = do
    n_temp <- getLine
    let n = read n_temp :: Int
    arr_temp <- getLine
    let arr = map read $ words arr_temp :: [Int]
        result = n - (maximum $ countAll arr 1)
    print result
    return ()

countN :: [Int] -> Int -> Int
countN [] _ = 0
countN (x:xs) n
    | x == n = 1 + countN xs n
    | otherwise = countN xs n


countAll :: [Int] -> Int -> [Int]
countAll _ 101 = []
countAll x n = ( countN x n ) : ( countAll x (n+1) )
