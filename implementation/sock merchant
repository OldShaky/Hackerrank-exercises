import Control.Applicative
import Control.Monad
import System.IO
import Data.List

main :: IO ()
main = do
    n_temp <- getLine
    let n = read n_temp :: Int
    ar_temp <- getLine
    let ar = map read $ words ar_temp :: [Int]
        result = show $ countPairs ar
    putStrLn result
    return ()


convert (Just a) = a

removeEleK :: [Int] -> Int -> [Int]
removeEleK (x:xs) 0 = xs
removeEleK (x:xs) k = x:removeEleK xs (k-1)

countPairs :: [Int] -> Int
countPairs [] = 0
countPairs (x:xs)
    | x `elem` xs = 1 + countPairs (removeEleK xs (convert $ x `elemIndex` xs) )
    | otherwise = countPairs xs
